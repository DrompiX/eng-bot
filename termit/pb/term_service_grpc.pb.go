// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: term_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TermServiceClient is the client API for TermService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TermServiceClient interface {
	AddTerm(ctx context.Context, in *AddTermRequest, opts ...grpc.CallOption) (*AddTermResponse, error)
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error)
}

type termServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTermServiceClient(cc grpc.ClientConnInterface) TermServiceClient {
	return &termServiceClient{cc}
}

func (c *termServiceClient) AddTerm(ctx context.Context, in *AddTermRequest, opts ...grpc.CallOption) (*AddTermResponse, error) {
	out := new(AddTermResponse)
	err := c.cc.Invoke(ctx, "/drompix.termit.TermService/AddTerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termServiceClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error) {
	out := new(GetCollectionResponse)
	err := c.cc.Invoke(ctx, "/drompix.termit.TermService/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TermServiceServer is the server API for TermService service.
// All implementations must embed UnimplementedTermServiceServer
// for forward compatibility
type TermServiceServer interface {
	AddTerm(context.Context, *AddTermRequest) (*AddTermResponse, error)
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error)
	mustEmbedUnimplementedTermServiceServer()
}

// UnimplementedTermServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTermServiceServer struct {
}

func (UnimplementedTermServiceServer) AddTerm(context.Context, *AddTermRequest) (*AddTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTerm not implemented")
}
func (UnimplementedTermServiceServer) GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedTermServiceServer) mustEmbedUnimplementedTermServiceServer() {}

// UnsafeTermServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TermServiceServer will
// result in compilation errors.
type UnsafeTermServiceServer interface {
	mustEmbedUnimplementedTermServiceServer()
}

func RegisterTermServiceServer(s grpc.ServiceRegistrar, srv TermServiceServer) {
	s.RegisterService(&TermService_ServiceDesc, srv)
}

func _TermService_AddTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TermServiceServer).AddTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drompix.termit.TermService/AddTerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TermServiceServer).AddTerm(ctx, req.(*AddTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TermService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TermServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drompix.termit.TermService/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TermServiceServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TermService_ServiceDesc is the grpc.ServiceDesc for TermService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TermService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drompix.termit.TermService",
	HandlerType: (*TermServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTerm",
			Handler:    _TermService_AddTerm_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _TermService_GetCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "term_service.proto",
}
